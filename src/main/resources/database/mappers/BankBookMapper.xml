<?xml version="1.0" encoding="UTF-8"?>
<!-- Schema 추가 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 230207 8교시 -->
<!-- 원래는 풀패키지명을 써야하는데, 공통설정파일에 별칭을 줘서 짧게 작성 가능 -->

  <mapper namespace="com.pooh.s1.bankbook.BankBookDAO">
  
  	<!-- 동일한 쿼리가 있다면 반복해서 쓰지말고 따로 뺴서 부품으로 쓰자 -->
 	 <sql id="searchCondition">
  		<if test="kind == 'contents'">
  			WHERE BOOKDETAIL LIKE '%' || #{search} || '%'
  		</if>
  		<if test="kind == 'title'">
  			WHERE BOOKNAME LIKE '%' || #{search} || '%'
  		</if>
  	</sql>
  	
  	<sql id="searchCondition2">
		WHERE
		<choose>
			<!-- 여기서는 pager.kind에서 꺼내쓴다고 #{}을 쓰면 안된다 -->
			<when test="kind == 'contents'">
				BOOKDETAIL
			</when>
			<otherwise>
				BOOKNAME
			</otherwise>
		</choose>
		
		LIKE '%' || #{search} || '%'
  	</sql>
  
  	
  	<select id="getBankBookCount" parameterType="Pager" resultType="Long">
  		SELECT COUNT(BOOKNUMBER) FROM BANKBOOK
  		<include refid="searchCondition"></include> 		
  	</select>
  	
  	<select id="getBankBookList" parameterType="Pager" resultType="BankBookDTO">
  		<!-- SELECT * FROM BANKBOOK ORDER BY BOOKNUMBER DESC -->
  		<!-- 최초 검색 결과에 조건을 줘야 ROWNUM에 빈틈이 없어진다 -->
  		SELECT * FROM
			(
			SELECT ROWNUM R, B.* FROM
				(SELECT * FROM BANKBOOK
				<include refid="searchCondition"></include>
				ORDER BY BOOKNUMBER DESC) B)
		WHERE R BETWEEN #{startRow} AND #{lastRow}
  	</select>
  	
  	<select id="getBankBookDetail" parameterType="BankBookDTO" resultMap="bankBookDetailResult">
  	<!-- resultType="BankBookDTO" -->
<!--   		SELECT * FROM BANKBOOK
  		WHERE BOOKNUMBER = #{bookNumber} -->
  		SELECT B.*, I.*
		FROM BANKBOOK B
			INNER JOIN
			BANKBOOKIMG I
			ON(B.BOOKNUMBER = I.BOOKNUMBER)
		WHERE B.BOOKNUMBER = #{bookNumber}
  	</select>
  	
  	
  	<!-- type에는 최종적으로 리턴하고싶은 타입 -->
	<resultMap type="BankBookDTO" id="bankBookDetailResult">
  		<!-- id는 Primary Key 용도, 그 외 나머지는 result에 쓴다 -->
  		<!-- column : PK의 column명, property : 위의 type의 멤버변수명(setter이름), 순서상관x -->
  		<id column="BOOKNUMBER" property="bookNumber"/>
  		<result column="BOOKNAME" property="bookName"/>
  		<result column="BOOKDETAIL" property="bookDetail"/>
  		<result column="BOOKRATE" property="bookRate"/>
  		<result column="BOOKSALE" property="bookSale"/>
	
  		<!-- 1:1 관계 -->
  		<!-- javaType에는 원래 풀패키지명을 써야함 -->
  		<association property="bankBookImgDTO" javaType="BankBookImgDTO">
  			<id column="FILENUM" property="fileNum"/>
  			<result column="FILENAME" property="fileName"/>
  			<result column="ORINAME" property="oriName"/>
  			<!-- 위와 중복되는 BOOKNUMBER는 써도되고 안써도되고 -->
  		</association>
	
  		<!-- 1:N 관계 -->
  		<!-- <collection property=""></collection> -->
	</resultMap>
  		

  			
  	
  	
  	
  	
  	<!-- select를 제외하면 리턴타입이 int인데 의미없다. 안받음 -->
  	<insert id="setBankBookAdd" parameterType="BankBookDTO"> 
  		<!-- KeyProperty : DTO의 setter이름과 일치, order :  시퀀스를 쿼리문 실행전에 먼저 가져오세요 -->
  		<selectKey keyProperty="bookNumber" order="BEFORE" resultType="Long"> 
  			SELECT BANKNUM_SEQ.NEXTVAL FROM DUAL
  		</selectKey>
  		INSERT INTO BANKBOOK(BOOKNUMBER, BOOKNAME, BOOKRATE, BOOKSALE, BOOKDETAIL)
  		VALUES(#{bookNumber}, #{bookName}, #{bookRate}, #{bookSale}, #{bookDetail})
  	</insert>
  	
  	<delete id="setBankBookDelete" parameterType="BankBookDTO">
  		DELETE BANKBOOK WHERE BOOKNUMBER = #{bookNumber}
  	</delete>
  	
  	<update id="setBankBookUpdate" parameterType="BankBookDTO">
  	<!-- Mapper로는 데이터타입을 하나만 보낼 수 있다. 하나로 묶어줘야해서 DTO로. List는 데이터들의 타입이 다 달라서 불안하다. -->
  	<!-- 얘를 호출할 때는 DTO에 데이터 5개가 들어가있어야한다. -->
  		UPDATE BANKBOOK
  		SET BOOKNAME = #{bookName}, BOOKRATE = #{bookRate}, BOOKSALE = #{bookSale}, BOOKDETAIL = #{bookDetail}
  		WHERE BOOKNUMBER = #{bookNumber}
  	</update>
  	
  	<insert id="setBankBookImgAdd" parameterType="BankBookImgDTO">
  		INSERT INTO BANKBOOKIMG
  		VALUES(BANKNUM_SEQ.NEXTVAL, #{fileName}, #{oriName}, #{bookNumber})
  	</insert>
  	
  	
  	
  </mapper>
  

