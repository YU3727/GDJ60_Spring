<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1"></beans:property>
	</beans:bean>
	
	<!-- File Download - Custom View를 해석하기위한 Resolver의 객체생성 -->
	<!-- BeanName은 따로 지정하지 않으면 클래스이름을 첫글자로 바꾼 것으로 설정된다. 설정하고싶으면 @Service("beanName")으로 따로 적어준다 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"></beans:property>
	</beans:bean>
	
	<!-- @Component Annotation을 준것과 동일한 효과 -->
	<beans:bean class="com.pooh.s1.interceptors.AdminCheckInterceptor" id="adminCheckInterceptor"></beans:bean>
	
	<!-- 어떤 url이 왔을 때, 어떤 interceptor를 실행할건지에 대한 정보 제공 -->
	<interceptors>
		<interceptor>
			<mapping path="/qna/*"/>
			<mapping path="/member/*"/>
			<exclude-mapping path="/qna/list"/> <!-- list는 제외하고 나머지에 필터링을 걸어줌. 이게 용이하다 -->
			<exclude-mapping path="/member/memberAdd"/>
			<exclude-mapping path="/member/memberAgree"/>
			<exclude-mapping path="/member/memberLogin"/>
			<!-- 객체를 여기에서 만들어서 써라 : <beans:bean></beans:bean> -->
			<!-- 객체를 참조해서 써라 -->
			<beans:ref bean="memberCheckInterceptor"/>
		</interceptor>
	
		<interceptor>
			<mapping path="/notice/*"/>
			<exclude-mapping path="/notice/list"/>
			<exclude-mapping path="/notice/detail"/>
			<beans:ref bean="adminCheckInterceptor"/>
			<!-- <beans:bean class="com.pooh.s1.interceptors.AdminCheckInterceptor"></beans:bean> -->
			<!-- 여기서만 쓸거면 beans:bean, 다른곳에서도 쓸거면 @Component annotation 달거나 xml에 beans:bean으로 객체 만들기 위임하고 ref -->
		</interceptor>
		
		<interceptor>
			<!-- 하나의 interceptor에 하나의 url pattern만 mapping할 수 있는건 아니다. 여러개도 가능. -->
			<mapping path="/qna/update"/>
			<mapping path="/qna/delete"/>
			<mapping path="/notice/update"/>
			<mapping path="/notice/delete"/>
			<beans:ref bean="ownerCheckInterceptor"/>
		</interceptor>
	
	
	</interceptors>
	
	
	
	<context:component-scan base-package="com.pooh.s1" />
	
	
	
</beans:beans>
